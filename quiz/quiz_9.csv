"Inheritance allows the creation of new classes based on existing classes, inheriting their properties and methods.", 1
"Inheritance in Java is achieved by using the 'inherits' keyword followed by the name of the superclass.", 0
"A subclass can add its own properties and methods in addition to the ones inherited from the superclass.", 1
"A subclass cannot override the methods inherited from its superclass in Java.", 0
"The 'extends' keyword in Java is used to define a subclass (derived class) of a superclass (base class).", 1
"In Java, a class can inherit from multiple classes simultaneously, achieving multiple inheritance.", 0
"The 'super' keyword in Java is used to call the constructor and methods of the superclass.", 1
"In Java, the 'super' keyword is used to define a subclass.", 0
"Abstract classes in Java cannot be instantiated directly.", 1
"Abstract classes in Java are defined using the 'abstraction' keyword.", 0
"An abstract method in Java is declared without an implementation in the abstract class.", 1
"In Java, abstract methods are defined using the 'virtual' keyword.", 0
"A subclass of an abstract class must implement all the abstract methods declared in the abstract class.", 1
"In Java, a subclass of an abstract class can choose not to implement some of the abstract methods.", 0
"A class hierarchy in Java represents the relationship between classes through inheritance.", 1
"In a class hierarchy, a subclass can only inherit from one superclass.", 1
"In Java, a class can inherit from another class and implement multiple interfaces at the same time.", 1
"In Java, a class hierarchy is created using the 'hierarchy' keyword.", 0
"The 'protected' access modifier in Java allows access within the same class, subclasses, and the same package.", 1
"In Java, the 'public' access modifier restricts access to within the same class only.", 0
"The 'final' keyword in Java is used to define a class that cannot be subclassed.", 1
"In Java, a final method can be overridden by its subclasses.", 0
"The '@Override' annotation in Java is used to indicate that a method is being overridden from a superclass.", 1
"In Java, the '@Overload' annotation is used to indicate method overriding.", 0
"In object-oriented programming, encapsulation is the practice of hiding internal details of an object and providing a controlled interface.", 1
"In Java, encapsulation is achieved by using the 'encapsulate' keyword.", 0
"Constructors in Java are used to initialize the object's state when it is created.", 1
"In Java, constructors have a return type.", 0
"Constructor overloading in Java allows a class to have more than one constructor.", 1
"Each overloaded constructor must have a unique signature, which means the number and/or type of parameters must differ.", 1
"In Java, constructors can only have one parameter.", 0
"In Java, constructors are not allowed to call other constructors within the same class.", 0
"Constructor overloading allows objects of a class to be instantiated in different ways, depending on the available information.", 1
"Overloaded constructors must have the same number of parameters.", 0
"The 'toString()' method in Java returns a string representation of an object.", 1
"The 'toString()' method is a feature of the abstract Object class, which is the parent of every Java class.", 1
"By default, the 'toString()' method returns a string that consists of the class name followed by the '@' symbol and the object's hashcode.", 1
"The default implementation of the 'toString()' method provides a meaningful description of the object.", 0
"To override the 'toString()' method, you need to define a new version of the method in your class that returns the desired string.", 1
"Overriding the 'toString()' method is mandatory for all Java classes.", 0
"When you print an object in Java, it implicitly calls the object's 'toString()' method.", 1
"The 'toString()' method cannot be overridden in Java.", 0
"Overriding the 'toString()' method allows you to provide a more informative string representation of an object.", 1
