"The class WarGame has a private attribute named deck of type Deck", 1
"The class WarGame has a public attribute named deck of type Deck", 0
"The constructor WarGame() initializes the roundNumber to 0", 0
"The constructor WarGame() initializes the roundNumber to 1", 1
"The method playGame() plays rounds until one player's hand is empty", 1
"The method playGame() plays a fixed number of rounds", 0
"The method distributeCards() draws cards from the deck alternately for each player", 1
"The method distributeCards() distributes all cards to Ada first, then to Alan", 0
"The method playRound() removes the first card from each player's hand", 1
"The method playRound() removes a random card from each player's hand", 0
"The method announceRound() prints the round number and the cards played by each player", 1
"The method announceRound() prints only the round number", 0
"The method compareCards() adds the higher card to the winner's hand", 1
"The method compareCards() adds both cards to Ada's hand if there is a tie", 0
"The method playWar() is called when both players play cards of different ranks", 0
"The method playWar() is called when both players play cards of the same rank", 1
"The method prepareWar() adds up to 4 face-down cards from each player to the war pile", 0
"The method prepareWar() adds up to 8 face-down cards from each player to the war pile", 1
"The method prepareWar() returns true if any player cannot continue the war", 0
"The method prepareWar() returns false if any player cannot continue the war", 1
"The method resolveWar() is called after each player plays an additional card in a war", 1
"The method resolveWar() is called before each player plays an additional card in a war", 0
"The method resolveWar() gives all war cards to the player with the higher war card", 1
"The method resolveWar() splits the war cards evenly between players if there is a tie", 0
"The method announceWinner() prints 'Game over. The winner is: Ada' if Ada's hand is empty", 0
"The method announceWinner() prints 'Game over. The winner is: Alan' if Ada's hand is empty", 1
"The main method creates a new instance of WarGame and calls the playGame() method", 1
"The main method creates a new instance of WarGame but does not call the playGame() method", 0
"The class WarGame uses an ArrayList to represent the deck of cards", 0
"The class WarGame uses a Deck object to represent the deck of cards", 1
"The adaHand and alanHand attributes are of type List<Card>", 1
"The adaHand and alanHand attributes are of type ArrayList<String>", 0
"The constructor WarGame() calls the shuffle() method on the deck object", 1
"The constructor WarGame() calls the shuffle() method on the adaHand object", 0
"The playGame() method uses a while loop to check if adaHand or alanHand is empty using the isEmpty() method", 1
"The playGame() method uses a for loop to iterate a fixed number of times", 0
"The distributeCards() method uses the drawCard() method to remove cards from the deck and add them to player hands", 1
"The distributeCards() method uses the addCard() method to add cards to the deck", 0
"The playRound() method calls the remove(0) method on both adaHand and alanHand to get the cards for the round", 1
"The playRound() method calls the get(0) method on both adaHand and alanHand to get the cards for the round", 0
"The announceRound() method uses System.out.printf() to print formatted output", 1
"The announceRound() method uses System.out.println() to print formatted output", 0
"The compareCards() method calls the getRank() method on the Card objects to determine the winner", 1
"The compareCards() method calls the getValue() method on the Card objects to determine the winner", 0
"The compareCards() method calls the add() method on the winning player's hand to add the cards", 1
"The compareCards() method calls the addAll() method on the winning player's hand to add the cards", 0
"The playWar() method creates a new ArrayList with the initial war cards using the List.of() method", 1
"The playWar() method creates a new LinkedList with the initial war cards using the List.of() method", 0
"The prepareWar() method calls the addAll() method to give all war cards to one player if the other player cannot continue", 1
"The prepareWar() method calls the add() method to give all war cards to one player if the other player cannot continue", 0
"The prepareWar() method uses Math.min() to determine the number of face-down cards to add to the war pile", 1
"The prepareWar() method uses Math.max() to determine the number of face-down cards to add to the war pile", 0
"The resolveWar() method calls the addAll() method to give all war cards to the winning player", 1
"The resolveWar() method calls the add() method to give all war cards to the winning player", 0
"The announceWinner() method uses a ternary operator to determine the winner based on which player's hand is empty", 1
"The announceWinner() method uses an if-else statement to determine the winner based on which player's hand is empty", 0
"The main method creates a new instance of the WarGame class and calls the playGame() method on it", 1
"The main method creates a new instance of the WarGame class and calls the startGame() method on it", 0
